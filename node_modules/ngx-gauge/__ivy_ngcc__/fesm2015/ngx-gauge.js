import { Directive, Component, ViewEncapsulation, ElementRef, Renderer, ViewChild, ContentChild, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @param {?} min
 * @param {?} max
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["canvas"];
const _c1 = ["role", "slider", "aria-readonly", "true"];
const _c2 = [1, "reading-block"];
const _c3 = ["reading", ""];
const _c4 = [1, "reading-affix", 3, "ngSwitch"];
const _c5 = [4, "ngSwitchCase"];
const _c6 = [3, "ngSwitch"];
const _c7 = [1, "reading-label", 3, "ngSwitch"];
const _c8 = ["canvas", ""];
function NgxGauge_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngSwitchCase", "true"]);
} }
function NgxGauge_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.prepend);
} }
function NgxGauge_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 1, ["*ngSwitchCase", "true"]);
} }
function NgxGauge_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r4.value));
} }
function NgxGauge_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 2, ["*ngSwitchCase", "true"]);
} }
function NgxGauge_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.append);
} }
function NgxGauge_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 3, ["*ngSwitchCase", "true"]);
} }
function NgxGauge_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r8.label);
} }
const _c9 = [[["ngx-gauge-prepend"]], [["ngx-gauge-value"]], [["ngx-gauge-append"]], [["ngx-gauge-label"]]];
const _c10 = ["ngx-gauge-prepend", "ngx-gauge-value", "ngx-gauge-append", "ngx-gauge-label"];
function clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
/**
 * @param {?} value
 * @return {?}
 */
function coerceBooleanProperty(value) {
    return value != null && `${value}` !== 'false';
}
/**
 * @param {?} value
 * @param {?=} fallbackValue
 * @return {?}
 */
function coerceNumberProperty(value, fallbackValue = 0) {
    return isNaN(parseFloat(value)) || isNaN(Number(value)) ? fallbackValue : Number(value);
}
/**
 * @param {?} value
 * @return {?}
 */
function cssUnit(value) {
    return `${value}px`;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumber(value) {
    return value != undefined && !isNaN(parseFloat(value)) && !isNaN(Number(value));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxGaugeAppend {
}
NgxGaugeAppend.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgxGaugeAppend, selectors: [["ngx-gauge-append"]], factory: function NgxGaugeAppend_Factory(t) { return new (t || NgxGaugeAppend)(); }, exportAs: ["ngxGaugeAppend"] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgxGaugeAppend, [{
        type: Directive,
        args: [{
                selector: "ngx-gauge-append",
                exportAs: "ngxGaugeAppend"
            }]
    }], null, null);
class NgxGaugePrepend {
}
NgxGaugePrepend.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgxGaugePrepend, selectors: [["ngx-gauge-prepend"]], factory: function NgxGaugePrepend_Factory(t) { return new (t || NgxGaugePrepend)(); }, exportAs: ["ngxGaugePrepend"] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgxGaugePrepend, [{
        type: Directive,
        args: [{
                selector: "ngx-gauge-prepend",
                exportAs: "ngxGaugePrepend"
            }]
    }], null, null);
class NgxGaugeValue {
}
NgxGaugeValue.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgxGaugeValue, selectors: [["ngx-gauge-value"]], factory: function NgxGaugeValue_Factory(t) { return new (t || NgxGaugeValue)(); }, exportAs: ["ngxGaugeValue"] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgxGaugeValue, [{
        type: Directive,
        args: [{
                selector: "ngx-gauge-value",
                exportAs: "ngxGaugeValue"
            }]
    }], null, null);
class NgxGaugeLabel {
}
NgxGaugeLabel.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgxGaugeLabel, selectors: [["ngx-gauge-label"]], factory: function NgxGaugeLabel_Factory(t) { return new (t || NgxGaugeLabel)(); }, exportAs: ["ngxGaugeLabel"] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgxGaugeLabel, [{
        type: Directive,
        args: [{
                selector: "ngx-gauge-label",
                exportAs: "ngxGaugeLabel"
            }]
    }], null, null);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULTS = {
    MIN: 0,
    MAX: 100,
    TYPE: 'arch',
    THICK: 4,
    FOREGROUND_COLOR: 'rgba(0, 150, 136, 1)',
    BACKGROUND_COLOR: 'rgba(0, 0, 0, 0.1)',
    CAP: 'butt',
    SIZE: 200
};
class NgxGauge {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._size = DEFAULTS.SIZE;
        this._min = DEFAULTS.MIN;
        this._max = DEFAULTS.MAX;
        this._animate = true;
        this._initialized = false;
        this._animationRequestID = 0;
        this.ariaLabel = '';
        this.ariaLabelledby = null;
        this.type = (/** @type {?} */ (DEFAULTS.TYPE));
        this.cap = (/** @type {?} */ (DEFAULTS.CAP));
        this.thick = DEFAULTS.THICK;
        this.foregroundColor = DEFAULTS.FOREGROUND_COLOR;
        this.backgroundColor = DEFAULTS.BACKGROUND_COLOR;
        this.thresholds = Object.create(null);
        this._value = 0;
        this.duration = 1200;
    }
    /**
     * @return {?}
     */
    get size() { return this._size; }
    /**
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this._size = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get min() { return this._min; }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = coerceNumberProperty(value, DEFAULTS.MIN);
    }
    /**
     * @return {?}
     */
    get animate() { return this._animate; }
    /**
     * @param {?} value
     * @return {?}
     */
    set animate(value) {
        this._animate = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get max() { return this._max; }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = coerceNumberProperty(value, DEFAULTS.MAX);
    }
    /**
     * @return {?}
     */
    get value() { return this._value; }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = coerceNumberProperty(val);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const isCanvasPropertyChanged = changes['thick'] || changes['type'] || changes['cap'] || changes['size'];
        /** @type {?} */
        const isDataChanged = changes['value'] || changes['min'] || changes['max'];
        if (this._initialized) {
            if (isDataChanged) {
                /** @type {?} */
                let nv;
                /** @type {?} */
                let ov;
                if (changes['value']) {
                    nv = changes['value'].currentValue;
                    ov = changes['value'].previousValue;
                }
                this._update(nv, ov);
            }
            if (isCanvasPropertyChanged) {
                this._destroy();
                this._init();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    _updateSize() {
        this._renderer.setElementStyle(this._elementRef.nativeElement, 'width', cssUnit(this._size));
        this._renderer.setElementStyle(this._elementRef.nativeElement, 'height', cssUnit(this._size));
        this._canvas.nativeElement.width = this.size;
        this._canvas.nativeElement.height = this.size;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._canvas) {
            this._init();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy();
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    _getBounds(type) {
        /** @type {?} */
        let head;
        /** @type {?} */
        let tail;
        if (type == 'semi') {
            head = Math.PI;
            tail = 2 * Math.PI;
        }
        else if (type == 'full') {
            head = 1.5 * Math.PI;
            tail = 3.5 * Math.PI;
        }
        else if (type === 'arch') {
            head = 0.8 * Math.PI;
            tail = 2.2 * Math.PI;
        }
        return { head, tail };
    }
    /**
     * @private
     * @param {?} start
     * @param {?} middle
     * @param {?} tail
     * @param {?} color
     * @return {?}
     */
    _drawShell(start, middle, tail, color) {
        /** @type {?} */
        let center = this._getCenter();
        /** @type {?} */
        let radius = this._getRadius();
        middle = Math.max(middle, start); // never below 0%
        middle = Math.min(middle, tail); // never exceed 100%
        if (this._initialized) {
            this._clear();
            this._context.beginPath();
            this._context.strokeStyle = this.backgroundColor;
            this._context.arc(center.x, center.y, radius, middle, tail, false);
            this._context.stroke();
            this._context.beginPath();
            this._context.strokeStyle = color;
            this._context.arc(center.x, center.y, radius, start, middle, false);
            this._context.stroke();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _clear() {
        this._context.clearRect(0, 0, this._getWidth(), this._getHeight());
    }
    /**
     * @private
     * @return {?}
     */
    _getWidth() {
        return this.size;
    }
    /**
     * @private
     * @return {?}
     */
    _getHeight() {
        return this.size;
    }
    /**
     * @private
     * @return {?}
     */
    _getRadius() {
        /** @type {?} */
        var center = this._getCenter();
        return center.x - this.thick;
    }
    /**
     * @private
     * @return {?}
     */
    _getCenter() {
        /** @type {?} */
        var x = this._getWidth() / 2;
        /** @type {?} */
        var y = this._getHeight() / 2;
        return { x, y };
    }
    /**
     * @private
     * @return {?}
     */
    _init() {
        this._context = ((/** @type {?} */ (this._canvas.nativeElement))).getContext('2d');
        this._initialized = true;
        this._updateSize();
        this._setupStyles();
        this._create();
    }
    /**
     * @private
     * @return {?}
     */
    _destroy() {
        if (this._animationRequestID) {
            window.cancelAnimationFrame(this._animationRequestID);
            this._animationRequestID = 0;
        }
        this._clear();
        this._context = null;
        this._initialized = false;
    }
    /**
     * @private
     * @return {?}
     */
    _setupStyles() {
        this._context.lineCap = this.cap;
        this._context.lineWidth = this.thick;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _getForegroundColorByRange(value) {
        /** @type {?} */
        const match = Object.keys(this.thresholds)
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return isNumber(item) && Number(item) <= value; }))
            .sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => Number(a) - Number(b)))
            .reverse()[0];
        return match !== undefined
            ? this.thresholds[match].color || this.foregroundColor
            : this.foregroundColor;
    }
    /**
     * @private
     * @param {?=} nv
     * @param {?=} ov
     * @return {?}
     */
    _create(nv, ov) {
        /** @type {?} */
        let self = this;
        /** @type {?} */
        let type = this.type;
        /** @type {?} */
        let bounds = this._getBounds(type);
        /** @type {?} */
        let duration = this.duration;
        /** @type {?} */
        let min = this.min;
        /** @type {?} */
        let max = this.max;
        /** @type {?} */
        let value = clamp(this.value, this.min, this.max);
        /** @type {?} */
        let start = bounds.head;
        /** @type {?} */
        let unit = (bounds.tail - bounds.head) / (max - min);
        /** @type {?} */
        let displacement = unit * (value - min);
        /** @type {?} */
        let tail = bounds.tail;
        /** @type {?} */
        let color = this._getForegroundColorByRange(value);
        /** @type {?} */
        let startTime;
        if (self._animationRequestID) {
            window.cancelAnimationFrame(self._animationRequestID);
        }
        /**
         * @param {?} timestamp
         * @return {?}
         */
        function animate(timestamp) {
            timestamp = timestamp || new Date().getTime();
            /** @type {?} */
            let runtime = timestamp - startTime;
            /** @type {?} */
            let progress = Math.min(runtime / duration, 1);
            /** @type {?} */
            let previousProgress = ov ? (ov - min) * unit : 0;
            /** @type {?} */
            let middle = start + previousProgress + displacement * progress;
            self._drawShell(start, middle, tail, color);
            if (self._animationRequestID && (runtime < duration)) {
                self._animationRequestID = window.requestAnimationFrame((/**
                 * @param {?} timestamp
                 * @return {?}
                 */
                (timestamp) => animate(timestamp)));
            }
            else {
                window.cancelAnimationFrame(self._animationRequestID);
            }
        }
        if (this._animate) {
            if (nv != undefined && ov != undefined) {
                displacement = unit * nv - unit * ov;
            }
            self._animationRequestID = window.requestAnimationFrame((/**
             * @param {?} timestamp
             * @return {?}
             */
            (timestamp) => {
                startTime = timestamp || new Date().getTime();
                animate(startTime);
            }));
        }
        else {
            self._drawShell(start, start + displacement, tail, color);
        }
    }
    /**
     * @private
     * @param {?} nv
     * @param {?} ov
     * @return {?}
     */
    _update(nv, ov) {
        this._clear();
        this._create(nv, ov);
    }
}
NgxGauge.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: NgxGauge, selectors: [["ngx-gauge"]], factory: function NgxGauge_Factory(t) { return new (t || NgxGauge)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); }, contentQueries: function NgxGauge_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxGaugeLabel, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxGaugePrepend, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxGaugeAppend, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxGaugeValue, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadContentQuery()) && (ctx._labelChild = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadContentQuery()) && (ctx._prependChild = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadContentQuery()) && (ctx._appendChild = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadContentQuery()) && (ctx._valueDisplayChild = _t.first);
    } }, viewQuery: function NgxGauge_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx._canvas = _t.first);
    } }, hostBindings: function NgxGauge_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(6);
        ɵngcc0.ɵɵelementHostAttrs(_c1);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-valuemin", ctx.min)("aria-valuemax", ctx.max)("aria-valuenow", ctx.value)("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby);
        ɵngcc0.ɵɵclassProp("ngx-gauge-meter", true);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], type: "type", cap: "cap", thick: "thick", foregroundColor: "foregroundColor", backgroundColor: "backgroundColor", thresholds: "thresholds", duration: "duration", size: "size", min: "min", animate: "animate", max: "max", value: "value", label: "label", append: "append", prepend: "prepend" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c10, consts: 16, vars: 16, template: function NgxGauge_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c9);
        ɵngcc0.ɵɵelementStart(0, "div", _c2, _c3);
        ɵngcc0.ɵɵstyling();
        ɵngcc0.ɵɵelementStart(2, "u", _c4);
        ɵngcc0.ɵɵtemplate(3, NgxGauge_3_Template, 1, 0, undefined, _c5);
        ɵngcc0.ɵɵtemplate(4, NgxGauge_ng_container_4_Template, 2, 1, "ng-container", _c5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerStart(5, _c6);
        ɵngcc0.ɵɵtemplate(6, NgxGauge_6_Template, 1, 0, undefined, _c5);
        ɵngcc0.ɵɵtemplate(7, NgxGauge_ng_container_7_Template, 3, 3, "ng-container", _c5);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(8, "u", _c4);
        ɵngcc0.ɵɵtemplate(9, NgxGauge_9_Template, 1, 0, undefined, _c5);
        ɵngcc0.ɵɵtemplate(10, NgxGauge_ng_container_10_Template, 2, 1, "ng-container", _c5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", _c7);
        ɵngcc0.ɵɵstyling();
        ɵngcc0.ɵɵtemplate(12, NgxGauge_12_Template, 1, 0, undefined, _c5);
        ɵngcc0.ɵɵtemplate(13, NgxGauge_ng_container_13_Template, 2, 1, "ng-container", _c5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(14, "canvas", null, _c8);
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("font-size", ctx.size * 0.22 + "px");
        ɵngcc0.ɵɵstyleProp("line-height", ctx.size + "px");
        ɵngcc0.ɵɵstylingApply();
        ɵngcc0.ɵɵselect(2);
        ɵngcc0.ɵɵproperty("ngSwitch", ctx._prependChild != null);
        ɵngcc0.ɵɵselect(3);
        ɵngcc0.ɵɵproperty("ngSwitchCase", true);
        ɵngcc0.ɵɵselect(4);
        ɵngcc0.ɵɵproperty("ngSwitchCase", false);
        ɵngcc0.ɵɵselect(5);
        ɵngcc0.ɵɵproperty("ngSwitch", ctx._valueDisplayChild != null);
        ɵngcc0.ɵɵselect(6);
        ɵngcc0.ɵɵproperty("ngSwitchCase", true);
        ɵngcc0.ɵɵselect(7);
        ɵngcc0.ɵɵproperty("ngSwitchCase", false);
        ɵngcc0.ɵɵselect(8);
        ɵngcc0.ɵɵproperty("ngSwitch", ctx._appendChild != null);
        ɵngcc0.ɵɵselect(9);
        ɵngcc0.ɵɵproperty("ngSwitchCase", true);
        ɵngcc0.ɵɵselect(10);
        ɵngcc0.ɵɵproperty("ngSwitchCase", false);
        ɵngcc0.ɵɵselect(11);
        ɵngcc0.ɵɵstyleProp("font-size", ctx.size / 13 + "px");
        ɵngcc0.ɵɵstyleProp("line-height", 5 * ctx.size / 13 + ctx.size + "px");
        ɵngcc0.ɵɵstylingApply();
        ɵngcc0.ɵɵproperty("ngSwitch", ctx._labelChild != null);
        ɵngcc0.ɵɵselect(12);
        ɵngcc0.ɵɵproperty("ngSwitchCase", true);
        ɵngcc0.ɵɵselect(13);
        ɵngcc0.ɵɵproperty("ngSwitchCase", false);
    } }, directives: [ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase], pipes: [ɵngcc1.DecimalPipe], styles: [".ngx-gauge-meter{display:inline-block;text-align:center;position:relative}.reading-block{position:absolute;width:100%;font-weight:400;white-space:nowrap;text-align:center;overflow:hidden;text-overflow:ellipsis}.reading-label{font-family:inherit;width:100%;display:inline-block;position:absolute;text-align:center;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-weight:400}.reading-affix{text-decoration:none;font-size:.6em;opacity:.8;font-weight:200;padding:0 .18em}.reading-affix:first-child{padding-left:0}.reading-affix:last-child{padding-right:0}"], encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgxGauge, [{
        type: Component,
        args: [{
                selector: 'ngx-gauge',
                template: "<div class=\"reading-block\" #reading [style.fontSize]=\"size * 0.22 + 'px'\" [style.lineHeight]=\"size + 'px'\">\r\n  <!-- This block can not be indented correctly, because line breaks cause layout spacing, related problem: https://pt.stackoverflow.com/q/276760/2998 -->\r\n  <u class=\"reading-affix\" [ngSwitch]=\"_prependChild != null\"><ng-content select=\"ngx-gauge-prepend\" *ngSwitchCase=\"true\"></ng-content><ng-container *ngSwitchCase=\"false\">{{prepend}}</ng-container></u><ng-container [ngSwitch]=\"_valueDisplayChild != null\"><ng-content *ngSwitchCase=\"true\" select=\"ngx-gauge-value\"></ng-content><ng-container *ngSwitchCase=\"false\">{{value | number}}</ng-container></ng-container><u class=\"reading-affix\" [ngSwitch]=\"_appendChild != null\"><ng-content select=\"ngx-gauge-append\" *ngSwitchCase=\"true\"></ng-content><ng-container *ngSwitchCase=\"false\">{{append}}</ng-container></u>\r\n</div>\r\n<div class=\"reading-label\" \r\n     [style.fontSize]=\"size / 13 + 'px'\" \r\n     [style.lineHeight]=\"(5 * size / 13) + size + 'px'\" \r\n     [ngSwitch]=\"_labelChild != null\">\r\n  <ng-content select=\"ngx-gauge-label\" *ngSwitchCase=\"true\"></ng-content>\r\n  <ng-container *ngSwitchCase=\"false\">{{label}}</ng-container>\r\n</div>\r\n<canvas #canvas></canvas>",
                host: {
                    'role': 'slider',
                    'aria-readonly': 'true',
                    '[class.ngx-gauge-meter]': 'true',
                    '[attr.aria-valuemin]': 'min',
                    '[attr.aria-valuemax]': 'max',
                    '[attr.aria-valuenow]': 'value',
                    '[attr.aria-label]': 'ariaLabel',
                    '[attr.aria-labelledby]': 'ariaLabelledby'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".ngx-gauge-meter{display:inline-block;text-align:center;position:relative}.reading-block{position:absolute;width:100%;font-weight:400;white-space:nowrap;text-align:center;overflow:hidden;text-overflow:ellipsis}.reading-label{font-family:inherit;width:100%;display:inline-block;position:absolute;text-align:center;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-weight:400}.reading-affix{text-decoration:none;font-size:.6em;opacity:.8;font-weight:200;padding:0 .18em}.reading-affix:first-child{padding-left:0}.reading-affix:last-child{padding-right:0}"]
            }]
    }], function () { return [{ type: ElementRef }, { type: Renderer }]; }, { constructor: [], _elementRef: [], _renderer: [], _size: [], _min: [], _max: [], _animate: [], _initialized: [], _animationRequestID: [], ariaLabel: [{
            type: Input,
            args: ['aria-label']
        }], ariaLabelledby: [{
            type: Input,
            args: ['aria-labelledby']
        }], type: [{
            type: Input
        }], cap: [{
            type: Input
        }], thick: [{
            type: Input
        }], foregroundColor: [{
            type: Input
        }], backgroundColor: [{
            type: Input
        }], thresholds: [{
            type: Input
        }], _value: [], duration: [{
            type: Input
        }], size: [{
            type: Input
        }], size: [], min: [{
            type: Input
        }], min: [], animate: [{
            type: Input
        }], animate: [], max: [{
            type: Input
        }], max: [], value: [{
            type: Input
        }], value: [], ngOnChanges: [], _updateSize: [], ngAfterViewInit: [], ngOnDestroy: [], _getBounds: [], _drawShell: [], _clear: [], _getWidth: [], _getHeight: [], _getRadius: [], _getCenter: [], _init: [], _context: [], _destroy: [], _setupStyles: [], _getForegroundColorByRange: [], _create: [], _update: [], _canvas: [{
            type: ViewChild,
            args: ['canvas', { static: true }]
        }], _labelChild: [{
            type: ContentChild,
            args: [NgxGaugeLabel, { static: false }]
        }], _prependChild: [{
            type: ContentChild,
            args: [NgxGaugePrepend, { static: false }]
        }], _appendChild: [{
            type: ContentChild,
            args: [NgxGaugeAppend, { static: false }]
        }], _valueDisplayChild: [{
            type: ContentChild,
            args: [NgxGaugeValue, { static: false }]
        }], label: [{
            type: Input
        }], append: [{
            type: Input
        }], prepend: [{
            type: Input
        }] });
/** @nocollapse */
NgxGauge.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer }
];
NgxGauge.propDecorators = {
    _canvas: [{ type: ViewChild, args: ['canvas', { static: true },] }],
    _labelChild: [{ type: ContentChild, args: [NgxGaugeLabel, { static: false },] }],
    _prependChild: [{ type: ContentChild, args: [NgxGaugePrepend, { static: false },] }],
    _appendChild: [{ type: ContentChild, args: [NgxGaugeAppend, { static: false },] }],
    _valueDisplayChild: [{ type: ContentChild, args: [NgxGaugeValue, { static: false },] }],
    ariaLabel: [{ type: Input, args: ['aria-label',] }],
    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],
    size: [{ type: Input }],
    min: [{ type: Input }],
    animate: [{ type: Input }],
    max: [{ type: Input }],
    type: [{ type: Input }],
    cap: [{ type: Input }],
    thick: [{ type: Input }],
    label: [{ type: Input }],
    append: [{ type: Input }],
    prepend: [{ type: Input }],
    foregroundColor: [{ type: Input }],
    backgroundColor: [{ type: Input }],
    thresholds: [{ type: Input }],
    value: [{ type: Input }],
    duration: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxGauge.prototype._canvas;
    /** @type {?} */
    NgxGauge.prototype._labelChild;
    /** @type {?} */
    NgxGauge.prototype._prependChild;
    /** @type {?} */
    NgxGauge.prototype._appendChild;
    /** @type {?} */
    NgxGauge.prototype._valueDisplayChild;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._min;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._max;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._animate;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._initialized;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._context;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._animationRequestID;
    /** @type {?} */
    NgxGauge.prototype.ariaLabel;
    /** @type {?} */
    NgxGauge.prototype.ariaLabelledby;
    /** @type {?} */
    NgxGauge.prototype.type;
    /** @type {?} */
    NgxGauge.prototype.cap;
    /** @type {?} */
    NgxGauge.prototype.thick;
    /** @type {?} */
    NgxGauge.prototype.label;
    /** @type {?} */
    NgxGauge.prototype.append;
    /** @type {?} */
    NgxGauge.prototype.prepend;
    /** @type {?} */
    NgxGauge.prototype.foregroundColor;
    /** @type {?} */
    NgxGauge.prototype.backgroundColor;
    /** @type {?} */
    NgxGauge.prototype.thresholds;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._value;
    /** @type {?} */
    NgxGauge.prototype.duration;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxGaugeModule {
}
NgxGaugeModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: NgxGaugeModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(NgxGaugeModule, { declarations: function () { return [NgxGauge,
        NgxGaugeAppend,
        NgxGaugePrepend,
        NgxGaugeValue,
        NgxGaugeLabel]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxGauge,
        NgxGaugeAppend,
        NgxGaugePrepend,
        NgxGaugeValue,
        NgxGaugeLabel]; } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgxGaugeModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NgxGauge, NgxGaugeAppend, NgxGaugePrepend, NgxGaugeValue, NgxGaugeLabel],
                exports: [NgxGauge, NgxGaugeAppend, NgxGaugePrepend, NgxGaugeValue, NgxGaugeLabel]
            }]
    }], null, null);
NgxGaugeModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function NgxGaugeModule_Factory(t) { return new (t || NgxGaugeModule)(); }, imports: [[CommonModule]] });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxGaugeModule, NgxGauge as ɵa, NgxGaugeAppend as ɵb, NgxGaugePrepend as ɵc, NgxGaugeValue as ɵd, NgxGaugeLabel as ɵe };

export {NgxGauge};
export {NgxGaugeAppend};
export {NgxGaugePrepend};
export {NgxGaugeValue};
export {NgxGaugeLabel};
//# sourceMappingURL=ngx-gauge.js.map